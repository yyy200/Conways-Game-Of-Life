{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","newEmptyGrid","Array","fill","useState","grid","setGrid","running","setRunning","onClickHandler","i","j","newGrid","produce","gridCopy","transformations","runningRef","useRef","current","runSim","useCallback","a","g","gridcopy","neighbors","forEach","x","y","newI","newJ","setTimeout","className","onClick","prevrunning","map","row","_","Math","random","style","display","gridTemplateColumns","col","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAmHeA,MA3Gf,WACE,IAAMC,EAAe,WACnB,OAAOC,MALK,IAKyBC,KAAKD,MAN9B,IAMqDC,KAAK,KAF3D,EAKWC,mBAAqBH,KALhC,mBAKNI,EALM,KAKAC,EALA,OAOiBF,oBAAkB,GAPnC,mBAONG,EAPM,KAOGC,EAPH,KASPC,EAAgB,SAACC,EAAUC,GAAX,OAAwB,WAC5C,IAAMC,EAAUC,YAAQR,GAAM,SAAAS,GAE5B,OADAA,EAASJ,GAAGC,GAAKN,EAAKK,GAAGC,GAAK,EAAI,EAC3BG,KAETR,EAAQM,KAGJG,EAAkB,CACtB,CAAC,EAAE,GACH,CAAC,EAAE,GACH,EAAE,EAAE,GACJ,CAAC,GAAG,GACJ,CAAC,EAAE,GACH,EAAE,GAAG,GACL,EAAE,EAAE,GACJ,CAAC,GAAG,IAGAC,EAAaC,iBAAOV,GAC1BS,EAAWE,QAAUX,EAErB,IAAMY,EAASC,sBAAW,sBAAE,sBAAAC,EAAA,yDACtBL,EAAWE,QADW,iEAKpBZ,GAAS,SAACgB,GACd,OAAOT,YAAQS,GAAG,SAAAC,GAChB,IAD6B,IAAD,WACpBb,GACN,IAF0B,eAElBC,GACN,IAAIa,EAAY,EAChBT,EAAgBU,SAAS,YAAY,IAAD,mBAATC,EAAS,KAAPC,EAAO,KAC5BC,EAAOlB,EAAIgB,EACXG,EAAOlB,EAAIgB,EAEbC,GAAQ,GAAKA,EAhDf,IAgDiCC,GAAQ,GAAKA,EAjD9C,KAkDAL,GAAaF,EAAEM,GAAMC,OAIP,IAAfxB,EAAKK,GAAGC,IAA0B,IAAda,EACrBD,EAASb,GAAGC,GAAK,GAEXa,EAAY,GAAKA,EAAY,KACnCD,EAASb,GAAGC,GAAK,IAfbA,EAAI,EAAGA,EA3CT,GA2CsBA,IAAO,EAA3BA,IADFD,EAAI,EAAGA,EAzCP,GAyCoBA,IAAO,EAA3BA,GAoBR,OAAOa,QA3Be,OA+B1BO,WAAWX,EAhEC,KAiCc,2CAgCzB,IASH,OACE,sBAAKY,UAAU,OAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,wBAAQC,QAAU,WAChBxB,GAAW,SAAAyB,GAAiB,OAAQA,KAEhC1B,IACFS,EAAWE,SAAU,EACrBC,MALJ,SAQMZ,EAAU,OAAS,UAGvB,wBAAQyB,QAAS,WAAO1B,EAnBhBJ,MAtEF,IAsEgCC,KAAKD,MAvErC,IAuE4DC,KAAK,IAC9D+B,KAAK,SAAAC,GAAG,OAAIA,EAAID,KAAI,SAAAE,GAAC,OAAIC,KAAKC,SAAW,GAAM,EAAI,SAkBb9B,GAAW,IAA1D,0BAIA,wBAAQwB,QAAS,WAAO1B,EAAQL,KAAiBO,GAAW,IAA5D,4BAKJ,qBAAKuB,UAAU,OAAOQ,MAAO,CAAEC,QAAQ,OAAQC,oBAAoB,UAAD,OAlGxD,GAkGwD,YAAlE,SACIpC,EAAK6B,KAAK,SAACC,EAAKzB,GAChB,OAAQyB,EAAID,KAAK,SAACQ,EAAK/B,GACrB,OAAS,qBAAuBqB,QAASvB,EAAeC,EAAEC,GAAIoB,UAAS,eAAYW,EAAM,QAAU,KAA1F,UAAahC,EAAb,YAAkBC,gBC5FxBgC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8118bd76.chunk.js","sourcesContent":["import produce from 'immer';\nimport React, { useCallback, useRef, useState } from 'react';\nimport './App.css';\n\nconst numRows = 50; //number of rows\nconst numCols = 50; //number of Columns\nconst runTime = 300; //MS period\n\nfunction App() {\n  const newEmptyGrid = ():number[][] => {\n    return Array<Array<number>>(numCols).fill(Array<number>(numRows).fill(0))\n  }\n\n  const [grid, setGrid] = useState<number[][]>(newEmptyGrid())\n\n  const [running, setRunning] = useState<boolean>(false)\n\n  const onClickHandler =(i:number, j:number) => () => {\n    const newGrid = produce(grid, gridCopy => {\n      gridCopy[i][j] = grid[i][j] ? 0 : 1\n      return gridCopy\n    })\n    setGrid(newGrid)\n  }\n\n  const transformations = [\n    [0,1],\n    [1,0],\n    [-1,0],\n    [0,-1],\n    [1,1],\n    [-1,-1],\n    [-1,1],\n    [1,-1]\n  ]\n\n  const runningRef = useRef(running)\n  runningRef.current = running\n\n  const runSim = useCallback( async () => {\n    if(!runningRef.current){\n      return\n    }\n\n    await setGrid( (g) => {\n      return produce(g, gridcopy => {\n        for(let i = 0; i < numCols; i ++) {\n          for(let j = 0; j < numRows; j ++) {\n            let neighbors = 0;\n            transformations.forEach( ([x,y]) => {\n              const newI = i + x\n              const newJ = j + y\n\n              if( newI >= 0 && newI < numCols && newJ >= 0 && newJ < numRows){\n                neighbors += g[newI][newJ]\n              }\n            })\n\n            if(grid[i][j] === 0 && neighbors === 3){\n              gridcopy[i][j] = 1;\n            }\n            else if(neighbors > 3 || neighbors < 2){\n              gridcopy[i][j] = 0;\n            }\n          }\n        }\n        return gridcopy\n      })\n    })\n    \n    setTimeout(runSim, runTime)\n  }, [])\n\n\n  const randomizer = ():number[][] => {\n    let NewGrid = Array<Array<number>>(numCols).fill(Array<number>(numRows).fill(0))\n    return NewGrid.map( row => row.map(_ => Math.random() > 0.6 ? 1 : 0))\n    \n  }\n\n  return (\n    <div className=\"main\">\n      <div className=\"btn-container\">\n        <button onClick={ () => {\n          setRunning(prevrunning => { return !prevrunning })\n\n          if(!running){\n            runningRef.current = true\n            runSim()\n          }\n          }}>\n            { running ? 'Stop' : 'Start' }\n          </button>\n\n          <button onClick={() => {setGrid(randomizer()); setRunning(false)}}>\n            Random Board\n          </button>\n\n          <button onClick={() => {setGrid(newEmptyGrid()); setRunning(false)}}>\n            Clear Board\n          </button>\n      </div>\n\n      <div className=\"grid\" style={{ display:'grid', gridTemplateColumns: `repeat(${numCols}, 20px)`}}>\n        { grid.map( (row, i) => {\n          return  row.map( (col, j) => {\n            return  (<div key={`${i}-${j}`} onClick={onClickHandler(i,j)} className={ `cell ${ col ? 'alive' : \"\"}` }></div>)\n          }) \n        })\n        }\n      </div> \n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}